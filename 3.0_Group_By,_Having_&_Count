#### Group By, Having & Count
-----------------
## COUNT()
---------------
# For instance, if we SELECT the COUNT() of the ID column in the pets table, it will return 4, because there are 4 ID's in the table.

query = """
        SELECT COUNT(ID)
        FROM 'bigquery-public-data.pet_records.pets'
"""
------------------
## GROUP BY
-------------------
# We can use GROUP BY to group together rows that have the same value in the Animal column, while using COUNT() to find out how many ID's we have in each group.

query = """
        SELECT Animal, COUNT(ID)
        FROM 'bigquery-public-data.pet_records.pets'
        GROUP BY Animal
"""
-------------------------
## GROUP BY ... HAVING
-------------------------
# So this query, for example, will only include groups that have more than one ID in them.

query = """
        SELECT Animal, COUNT(ID)
        FROM 'bigquery-public-data.pet_records.pets'
        GROUP BY Animal
        HAVING COUNT(ID) > 1
"""

# Example: Which Hacker News comments generated the most discussion?
-------------------------------------------------------
# Query to select comments that received more than 10 replies
query_popular = """
                SELECT parent, COUNT(id)
                FROM `bigquery-public-data.hacker_news.full`
                GROUP BY parent
                HAVING COUNT(id) > 10
                """
------------------------------------------------------
# Set up the query (cancel the query if it would use too much of 
# your quota, with the limit set to 10 GB)
safe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)
query_job = client.query(query_popular, job_config=safe_config)

# API request - run the query, and convert the results to a pandas DataFrame
popular_comments = query_job.to_dataframe()

# Print the first five rows of the DataFrame
popular_comments.head()
------------------------------------------------------
## Aliasing and other improvements
-----------------------------------------------------
# Improved version of earlier query, now with aliasing & improved readability
query_improved = """
                 SELECT parent, COUNT(1) AS NumPosts
                 FROM `bigquery-public-data.hacker_news.full`
                 GROUP BY parent
                 HAVING COUNT(1) > 10
                 """

safe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)
query_job = client.query(query_improved, job_config=safe_config)

# API request - run the query, and convert the results to a pandas DataFrame
improved_df = query_job.to_dataframe()

# Print the first five rows of the DataFrame
improved_df.head()
-------------------------------
## Note on using GROUP BY
# Note that because it tells SQL how to apply aggregate functions (like COUNT()), it doesn't make sense to use GROUP BY without an aggregate function. 
# Similarly, if you have any GROUP BY clause, then all variables must be passed to either a
# - GROUP BY command, or
# - an aggregation function.
------------------------------
query_good = """
             SELECT parent, COUNT(id)
             FROM `bigquery-public-data.hacker_news.full`
             GROUP BY parent
             """
------------------------------
query_bad = """
            SELECT `by` AS author, parent, COUNT(id)
            FROM `bigquery-public-data.hacker_news.full`
            GROUP BY parent
            """
