##### AS

query = """
        SELECT Animal, COUNT(ID)
        FROM 'bigquery-public-data.pet_records.pets'
        GROUP BY Animal
        """
----------------
query = """
        SELECT Animal, COUNT(ID) AS Number
        FROM 'bigquery-public-data.pet_records.pets'
        GROUP BY Animal
        """
-----------------
#### WITH ... AS
query = """
        WITH Seniors AS
        (  
          SELECT ID, Name
          FROM 'bigquery-public-data.pet_records.pets'
          WHERE Years_old > 5

        )
        """
-----------------
# A common table expression (or CTE) is a temporary table that you return within your query. 
# CTEs are helpful for splitting your queries into readable chunks, and you can write queries against them.

For instance, you might want to use the pets table to ask questions about older animals in particular. So you can start by creating a CTE which only contains information about animals more than five years old like this:
query = """
        WITH Seniors AS
        (  
          SELECT ID, Name
          FROM 'bigquery-public-data.pet_records.pets'
          WHERE Years_old > 5
        )
        SELECT ID
        FROM Seniors
        """
---------------------
## Example: How many Bitcoin transactions are made per month?
---------------------
# Query to select the number of transactions per date, sorted by date
query_with_CTE = """ 
                 WITH time AS 
                 (
                     SELECT DATE(block_timestamp) AS trans_date
                     FROM `bigquery-public-data.crypto_bitcoin.transactions`
                 )
                 SELECT COUNT(1) AS transactions,
                        trans_date
                 FROM time
                 GROUP BY trans_date
                 ORDER BY trans_date
                 """

# Set up the query (cancel the query if it would use too much of 
# your quota, with the limit set to 10 GB)
safe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)
query_job = client.query(query_with_CTE, job_config=safe_config)

# API request - run the query, and convert the results to a pandas DataFrame
transactions_by_date = query_job.to_dataframe()

# Print the first five rows
transactions_by_date.head()

---------------------

transactions_by_date.set_index('trans_date').plot()

